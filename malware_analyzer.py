#!/usr/bin/env python3
import hashlib
import os
import sys
import argparse
import subprocess
from datetime import datetime

# Hashing
def generate_hash(file_path, hash_algo):
    hash_func = hashlib.new(hash_algo)
    with open(file_path, "rb") as file:
        while chunk := file.read(4096):
            hash_func.update(chunk)
    return hash_func.hexdigest()

# Extracting strings from a file
def extract_strings(file_path):
    try:
        result = subprocess.run(['strings', file_path], capture_output=True, text=True)
        return result.stdout
    except Exception as e:
        return f"Error extracting strings: {e}"

# Extract metadata (like size, creation date)
def extract_metadata(file_path):
    file_stats = os.stat(file_path)
    metadata = {
        "Size (bytes)": file_stats.st_size,
        "Last Modified": datetime.fromtimestamp(file_stats.st_mtime).isoformat(),
        "Creation Time": datetime.fromtimestamp(file_stats.st_ctime).isoformat(),
    }
    return metadata

# Portable Executable (PE) section extraction
def extract_pe_sections(file_path):
    try:
        import pefile
        pe = pefile.PE(file_path)
        sections = {section.Name.decode().strip(): hex(section.VirtualAddress) for section in pe.sections}
        return sections
    except Exception as e:
        return f"Error extracting PE sections: {e}"

# File type identification
def identify_file_type(file_path):
    result = subprocess.run(['file', file_path], capture_output=True, text=True)
    return result.stdout

# Main CLI logic
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Malware Analyzer CLI for static file analysis.")
    parser.add_argument("file", help="Path to the file for analysis")
    parser.add_argument("--hash", choices=["md5", "sha256"], help="Generate hash of the file")
    parser.add_argument("--strings", action="store_true", help="Extract readable strings from the file")
    parser.add_argument("--pe-sections", action="store_true", help="Extract sections from PE file")
    parser.add_argument("--metadata", action="store_true", help="Extract metadata of the file")
    parser.add_argument("--identify", action="store_true", help="Identify file type")

    args = parser.parse_args()

    if not os.path.exists(args.file):
        print(f"Error: {args.file} does not exist")
        sys.exit(1)

    # Hashing
    if args.hash:
        print(f"Generating {args.hash.upper()} hash...")
        file_hash = generate_hash(args.file, args.hash)
        print(f"{args.hash.upper()} Hash: {file_hash}")

    # Extract strings
    if args.strings:
        print("Extracting readable strings from the file...")
        strings_output = extract_strings(args.file)
        print(strings_output)

    # Metadata
    if args.metadata:
        print("Extracting file metadata...")
        metadata = extract_metadata(args.file)
        for key, value in metadata.items():
            print(f"{key}: {value}")

    # PE sections
    if args.pe_sections:
        print("Extracting PE sections (for executables)...")
        pe_sections = extract_pe_sections(args.file)
        if isinstance(pe_sections, dict):
            for name, addr in pe_sections.items():
                print(f"Section: {name}, Address: {addr}")
        else:
            print(pe_sections)

    # File type
    if args.identify:
        print("Identifying file type...")
        file_type = identify_file_type(args.file)
        print(f"File Type: {file_type}")
